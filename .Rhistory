# Maybe same phone given to someone else in compound, or same family move
# within compound
error.df <- a5[a5$pt=='ERROR',]
error.df <- error.df[complete.cases(error.df),]
# Records for which we have no monthly visit data
missing.data.df <- a5[!complete.cases(a5),]
# PERSON-TIME CALCULATIONS ------------------------------------------------
a6 <- a5[complete.cases(a5) & a5$pt != "ERROR",]
a6$pt <- as.numeric(a6$pt)
sum(a6$pt)
sum(a6$pt) /365
View(a6)
View(missing.data.df)
write.csv(missing.data.df[,c(1,6,7,8)], file = "missing_data.csv")
write.csv(a6, file = "A-1 Person-Time per HH.csv")
write.csv(error.df, file = "A-3 Data Checking.csv")
# Author: Matthew Phelps
#Desc: Calculate number of people living in each household at baseline
# Intro -------------------------------------------------------------------
rm(list = ls())
graphics.off()
pc <- "C:/Users/wrz741/Dropbox/C5_R_Codes/Rdata"
setwd(pc)
rm(pc)
library(dplyr)
library(xlsx)
detach("package:plyr", unload=TRUE) # disrupts the dplyr package
CustomEndDate <- function(x) {
# Returns the specified end date if the withdrawl field is null
if (x < endDate & !is.na(x)){
return(x)
} else {
x <- endDate
return(x)
}
}
personTime <- function(x) {
# Calculates person time for each specified date range
complete.x <- x[complete.cases(x),]
factor = complete.x$unique_ID
x1 <- split(complete.x, factor)
for (j in 1:length(x1)) {
x1[[j]]$pt <-0
x1[[j]]$delay <-0
for (i in 1:nrow(x1[[j]])) {
if(i == 1 & nrow(x1[[j]]) != 1 & x1[[j]]$date.monthly.visit[i] > x1[[j]]$Date.phone.distribution[i] ) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$date.monthly.visit[i] - x1[[j]]$Date.phone.distribution[i]) * x1[[j]]$Num_ppl[i]
} else if (i == 1 & nrow(x1[[j]]) != 1) {
x1[[j]]$pt <- 0
} else if (nrow(x1[[j]]) == 1 & x1[[j]]$Date.withdrawl.move[i] > x1[[j]]$Date.phone.distribution[i]) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$Date.withdrawl.move[i] - x1[[j]]$Date.phone.distribution[i]) * x1[[j]]$Num_ppl[i]
} else if(i > 1 & i < nrow(x1[[j]]) & x1[[j]]$date.monthly.visit[i] > x1[[j]]$date.monthly.visit[i-1]) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$date.monthly.visit[i] - x1[[j]]$date.monthly.visit[i-1]) * x1[[j]]$Num_ppl[i]
} else if (x1[[j]]$Date.withdrawl.move[i] > x1[[j]]$date.monthly.visit[i]) {
x1[[j]]$pt[i] <- as.numeric((x1[[j]]$Date.withdrawl.move[i] - x1[[j]]$date.monthly.visit[i]) +
(x1[[j]]$date.monthly.visit[i] - x1[[j]]$date.monthly.visit[i-1])) * x1[[j]]$Num_ppl[i]
} else {
x1[[j]]$pt <- 'ERROR'
}
x1[[j]]$delay <- min(x1[[j]]$date.monthly.visit - x1[[j]]$Date.phone.distribution )
}
}
return(x1)
}
load("X-1 Choleraphone distribution 31Jul15.Rdata")
load("X-2 monthly visits 31Jul15.Rdata")
endDate <- as.Date('31-12-14', "%d-%m-%y")
endDate <- Sys.Date()
# Rename variables for less space.
x2 <- rename(x2, Num_ppl = Numer.of.ppl.in.household.at.monthly.visit,
date.monthly.visit = Date.of.monthly.visit)
x1 <- rename(x1, Date.baseline = Date.of.baseline, Date.phone.distribution = Date.of.phone.distribution,
Date.withdrawl.move = Date.of.withdrawl.or.move)
# RESTRICT TO DESIRED TIME-FRAME
a1 <- x1[x1$Date.phone.distribution <= endDate, ]
rm(x1)
a2 <- x2[x2$date.monthly.visit <= endDate,]
rm(x2)
# SET END DATE
for (i in 1:nrow(a1)) {
a1$Date.withdrawl.move[i] <- CustomEndDate(a1$Date.withdrawl.move[i])
}
min(a1$Date.withdrawl.move)
max(a1$Date.withdrawl.move)
# a1$daysActive <- as.numeric(a1$Date.of.withdrawl.or.move - a1$Date.of.phone.distribution)
# MERGE - Keep all records at first to find missing data
View(a2)
# Author: Matthew Phelps
#Desc: Calculate number of people living in each household at baseline
# Intro -------------------------------------------------------------------
rm(list = ls())
graphics.off()
pc <- "C:/Users/wrz741/Dropbox/C5_R_Codes/Rdata"
setwd(pc)
rm(pc)
library(dplyr)
library(xlsx)
library(data.table)
#detach("package:plyr", unload=TRUE) # disrupts the dplyr package
CustomEndDate <- function(x) {
# Returns the specified end date if the withdrawl field is null
if (x < endDate & !is.na(x)){
return(x)
} else {
x <- endDate
return(x)
}
}
personTime <- function(x) {
# Calculates person time for each specified date range
complete.x <- x[complete.cases(x),]
factor = complete.x$hh_listing_id
x1 <- split(complete.x, factor)
for (j in 1:length(x1)) {
x1[[j]]$pt <-0
x1[[j]]$delay <-0
for (i in 1:nrow(x1[[j]])) {
if(i == 1 & nrow(x1[[j]]) != 1 & x1[[j]]$date.monthly.visit[i] > x1[[j]]$Date.phone.distribution[i] ) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$date.monthly.visit[i] - x1[[j]]$Date.phone.distribution[i]) * x1[[j]]$Num_ppl[i]
} else if (i == 1 & nrow(x1[[j]]) != 1) {
x1[[j]]$pt <- 0
} else if (nrow(x1[[j]]) == 1 & x1[[j]]$Date.withdrawl.move[i] > x1[[j]]$Date.phone.distribution[i]) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$Date.withdrawl.move[i] - x1[[j]]$Date.phone.distribution[i]) * x1[[j]]$Num_ppl[i]
} else if(i > 1 & i < nrow(x1[[j]]) & x1[[j]]$date.monthly.visit[i] > x1[[j]]$date.monthly.visit[i-1]) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$date.monthly.visit[i] - x1[[j]]$date.monthly.visit[i-1]) * x1[[j]]$Num_ppl[i]
} else if (x1[[j]]$Date.withdrawl.move[i] > x1[[j]]$date.monthly.visit[i]) {
x1[[j]]$pt[i] <- as.numeric((x1[[j]]$Date.withdrawl.move[i] - x1[[j]]$date.monthly.visit[i]) +
(x1[[j]]$date.monthly.visit[i] - x1[[j]]$date.monthly.visit[i-1])) * x1[[j]]$Num_ppl[i]
} else {
x1[[j]]$pt <- 'ERROR'
}
x1[[j]]$delay <- min(x1[[j]]$date.monthly.visit - x1[[j]]$Date.phone.distribution )
}
}
return(x1)
}
load("X-1 Choleraphone distribution 31Jul15.Rdata")
load("X-2 monthly visits 31Jul15.Rdata")
endDate <- as.Date('31-12-14', "%d-%m-%y")
endDate <- Sys.Date()
# Rename variables for less space.
x2 <- rename(x2, Num_ppl = Numer.of.ppl.in.household.at.monthly.visit,
date.monthly.visit = Date.of.monthly.visit)
x1 <- rename(x1, Date.baseline = Date.of.baseline, Date.phone.distribution = Date.of.phone.distribution,
Date.withdrawl.move = Date.of.withdrawl.or.move)
# RESTRICT TO DESIRED TIME-FRAME
a1 <- x1[x1$Date.phone.distribution <= endDate, ]
rm(x1)
a2 <- x2[x2$date.monthly.visit <= endDate,]
rm(x2)
# SET END DATE
for (i in 1:nrow(a1)) {
a1$Date.withdrawl.move[i] <- CustomEndDate(a1$Date.withdrawl.move[i])
}
min(a1$Date.withdrawl.move)
max(a1$Date.withdrawl.move)
# a1$daysActive <- as.numeric(a1$Date.of.withdrawl.or.move - a1$Date.of.phone.distribution)
# MERGE - Keep all records at first to find missing data
a3 <- merge(a2, a1, by ="hh_listing_id", all=T, suffixes = c("", ".y"))
a3$HHID.y <- a3$Listing.number.y <- NULL
# CLEAN where house moved but kept same HHID and listing number
x<-a3
x2<-0
x2 <- data.frame(1,2,3,4,5,6,7,8,9)
setnames(x2, old = c(1,2,3,4,5,6,7,8,9), new = c(colnames(x)))
for(i in 1:nrow(x))
if (x$date.monthly.visit[i] >= x$Date.baseline[i] |
x$date.monthly.visit[i] <= x$Date.withdrawl.move[i] ) {
x2[i,] <- x[i,]
} else {
x2[i,] <- 0
}
hhCleanup <- function(x) {
x2 <- data.frame(1,2,3,4,5,6,7,8,9)
setnames(x2, old = c(1,2,3,4,5,6,7,8,9), new = c(colnames(x)))
for(i in 1:nrow(x))
if (x$date.monthly.visit[i] >= x$Date.baseline[i] |
x$date.monthly.visit[i] <= x$Date.withdrawl.move[i] ) {
x2[i,] <- x[i,]
} else {
x2[i,] <- 0
}
return (x2)
}
x <- hhCleanup(a3[complete.cases(a3), ])
as.date(x$Date.withdrawl.move)
as.Date(x$Date.withdrawl.move)
# Author: Matthew Phelps
#Desc: Calculate number of people living in each household at baseline
# Intro -------------------------------------------------------------------
rm(list = ls())
graphics.off()
mac <- ""
pc <- "C:/Users/wrz741/Dropbox/C5 Baseline data/Double-entered data/Set 2 of 69 households"
setwd(pc)
rm(mac, pc)
library(plyr)
library(memisc) # read .spss files
HH_member_info<-as.data.set(spss.system.file('main_FinalEntry_69q.sav'), stringsAsFactors=FALSE)
x <- as.data.frame(HH_member_info)
View(x)
# Author: Matthew Phelps
#Desc: Calculate number of people living in each household at baseline
# Intro -------------------------------------------------------------------
rm(list = ls())
graphics.off()
pc <- "C:/Users/wrz741/Dropbox/C5_R_Codes/Rdata"
setwd(pc)
rm(pc)
library(dplyr)
library(xlsx)
library(data.table)
#detach("package:plyr", unload=TRUE) # disrupts the dplyr package
CustomEndDate <- function(x) {
# Returns the specified end date if the withdrawl field is null
if (x < endDate & !is.na(x)){
return(x)
} else {
x <- endDate
return(x)
}
}
hhCleanup <- function(x) {
x2 <- data.frame(1,2,3,4,5,6,7,8,9)
setnames(x2, old = c(1,2,3,4,5,6,7,8,9), new = c(colnames(x)))
for(i in 1:nrow(x))
if (x$date.monthly.visit[i] >= x$Date.baseline[i] |
x$date.monthly.visit[i] <= x$Date.withdrawl.move[i] ) {
x2[i,] <- x[i,]
} else {
x2[i,] <- 0
}
x2$date.monthly.visit <- as.Date(x2$date.monthly.visit, origin = "1970-01-01")
x2$Date.baseline <- as.Date(x2$Date.baseline, origin = "1970-01-01")
x2$Date.phone.distribution <- as.Date(x2$Date.phone.distribution, origin = "1970-01-01")
x2$Date.withdrawl.move <- as.Date(x2$Date.withdrawl.move, origin = "1970-01-01")
return (x2)
}
personTime <- function(x) {
# Calculates person time for each specified date range. Returns data frame in same dimensions as input
complete.x <- x[complete.cases(x),]
factor = complete.x$hh_listing_id
x1 <- split(complete.x, factor)
for (j in 1:length(x1)) {
x1[[j]]$pt <-0
x1[[j]]$delay <-0
for (i in 1:nrow(x1[[j]])) {
if(i == 1 & nrow(x1[[j]]) != 1 & x1[[j]]$date.monthly.visit[i] > x1[[j]]$Date.phone.distribution[i] ) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$date.monthly.visit[i] - x1[[j]]$Date.phone.distribution[i]) * x1[[j]]$Num_ppl[i]
} else if (i == 1 & nrow(x1[[j]]) != 1) {
x1[[j]]$pt <- 0
} else if (nrow(x1[[j]]) == 1 & x1[[j]]$Date.withdrawl.move[i] > x1[[j]]$Date.phone.distribution[i]) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$Date.withdrawl.move[i] - x1[[j]]$Date.phone.distribution[i]) * x1[[j]]$Num_ppl[i]
} else if(i > 1 & i < nrow(x1[[j]]) & x1[[j]]$date.monthly.visit[i] > x1[[j]]$date.monthly.visit[i-1]) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$date.monthly.visit[i] - x1[[j]]$date.monthly.visit[i-1]) * x1[[j]]$Num_ppl[i]
} else if (x1[[j]]$Date.withdrawl.move[i] > x1[[j]]$date.monthly.visit[i]) {
x1[[j]]$pt[i] <- as.numeric((x1[[j]]$Date.withdrawl.move[i] - x1[[j]]$date.monthly.visit[i]) +
(x1[[j]]$date.monthly.visit[i] - x1[[j]]$date.monthly.visit[i-1])) * x1[[j]]$Num_ppl[i]
} else {
x1[[j]]$pt <- 'ERROR'
}
x1[[j]]$delay <- min(x1[[j]]$date.monthly.visit - x1[[j]]$Date.phone.distribution )
}
}
x1 <-  do.call(rbind.data.frame, x1)
row.names(x1) <- NULL
return(x1)
}
load("X-1 Choleraphone distribution 31Jul15.Rdata")
load("X-2 monthly visits 31Jul15.Rdata")
endDate <- as.Date('31-12-14', "%d-%m-%y")
endDate <- Sys.Date()
# Rename variables for less space.
x2 <- rename(x2, Num_ppl = Numer.of.ppl.in.household.at.monthly.visit,
date.monthly.visit = Date.of.monthly.visit)
x1 <- rename(x1, Date.baseline = Date.of.baseline, Date.phone.distribution = Date.of.phone.distribution,
Date.withdrawl.move = Date.of.withdrawl.or.move)
# RESTRICT TO DESIRED TIME-FRAME
a1 <- x1[x1$Date.phone.distribution <= endDate, ]
rm(x1)
a2 <- x2[x2$date.monthly.visit <= endDate,]
rm(x2)
# SET END DATE
for (i in 1:nrow(a1)) {
a1$Date.withdrawl.move[i] <- CustomEndDate(a1$Date.withdrawl.move[i])
}
min(a1$Date.withdrawl.move)
max(a1$Date.withdrawl.move)
# a1$daysActive <- as.numeric(a1$Date.of.withdrawl.or.move - a1$Date.of.phone.distribution)
# MERGE - Keep all records at first to find missing data
a3 <- merge(a2, a1, by ="hh_listing_id", all=T, suffixes = c("", ".y"))
a3$HHID.y <- a3$Listing.number.y <- NULL
# Records for which we have no monthly visit data
missing.df <- a3[!complete.cases(a3), ]
# CLEAN where house moved but kept same HHID and listing number
a4 <- hhCleanup(a3[complete.cases(a3), ])
# PERSONE TIME for each household during each time-frame
a5 <- personTime(a4)
# Return to Data Frame for easier reading.
a5 <- do.call(rbind.data.frame, a4)
er <- a5[a5$delay <0,]
View(er)
View(a5)
# Author: Matthew Phelps
#Desc: Calculate number of people living in each household at baseline
# Intro -------------------------------------------------------------------
rm(list = ls())
graphics.off()
pc <- "C:/Users/wrz741/Dropbox/C5_R_Codes/Rdata"
setwd(pc)
rm(pc)
library(dplyr)
library(xlsx)
library(data.table)
#detach("package:plyr", unload=TRUE) # disrupts the dplyr package
CustomEndDate <- function(x) {
# Returns the specified end date if the withdrawl field is null
if (x < endDate & !is.na(x)){
return(x)
} else {
x <- endDate
return(x)
}
}
hhCleanup <- function(x) {
x2 <- data.frame(1,2,3,4,5,6,7,8,9)
setnames(x2, old = c(1,2,3,4,5,6,7,8,9), new = c(colnames(x)))
for(i in 1:nrow(x))
if (x$date.monthly.visit[i] >= x$Date.baseline[i] |
x$date.monthly.visit[i] <= x$Date.withdrawl.move[i] ) {
x2[i,] <- x[i,]
} else {
x2[i,] <- 0
}
x2$date.monthly.visit <- as.Date(x2$date.monthly.visit, origin = "1970-01-01")
x2$Date.baseline <- as.Date(x2$Date.baseline, origin = "1970-01-01")
x2$Date.phone.distribution <- as.Date(x2$Date.phone.distribution, origin = "1970-01-01")
x2$Date.withdrawl.move <- as.Date(x2$Date.withdrawl.move, origin = "1970-01-01")
return (x2)
}
personTime <- function(x) {
# Calculates person time for each specified date range. Returns data frame in same dimensions as input
complete.x <- x[complete.cases(x),]
factor = complete.x$hh_listing_id
x1 <- split(complete.x, factor)
for (j in 1:length(x1)) {
x1[[j]]$pt <-0
x1[[j]]$delay <-0
for (i in 1:nrow(x1[[j]])) {
if(i == 1 & nrow(x1[[j]]) != 1 & x1[[j]]$date.monthly.visit[i] > x1[[j]]$Date.phone.distribution[i] ) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$date.monthly.visit[i] - x1[[j]]$Date.phone.distribution[i]) * x1[[j]]$Num_ppl[i]
} else if (i == 1 & nrow(x1[[j]]) != 1) {
x1[[j]]$pt <- 0
} else if (nrow(x1[[j]]) == 1 & x1[[j]]$Date.withdrawl.move[i] > x1[[j]]$Date.phone.distribution[i]) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$Date.withdrawl.move[i] - x1[[j]]$Date.phone.distribution[i]) * x1[[j]]$Num_ppl[i]
} else if(i > 1 & i < nrow(x1[[j]]) & x1[[j]]$date.monthly.visit[i] > x1[[j]]$date.monthly.visit[i-1]) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$date.monthly.visit[i] - x1[[j]]$date.monthly.visit[i-1]) * x1[[j]]$Num_ppl[i]
} else if (x1[[j]]$Date.withdrawl.move[i] > x1[[j]]$date.monthly.visit[i]) {
x1[[j]]$pt[i] <- as.numeric((x1[[j]]$Date.withdrawl.move[i] - x1[[j]]$date.monthly.visit[i]) +
(x1[[j]]$date.monthly.visit[i] - x1[[j]]$date.monthly.visit[i-1])) * x1[[j]]$Num_ppl[i]
} else {
x1[[j]]$pt <- 'ERROR'
}
x1[[j]]$delay <- min(x1[[j]]$date.monthly.visit - x1[[j]]$Date.phone.distribution )
}
}
x1 <-  do.call(rbind.data.frame, x1)
row.names(x1) <- NULL
return(x1)
}
load("X-1 Choleraphone distribution 31Jul15.Rdata")
load("X-2 monthly visits 31Jul15.Rdata")
endDate <- as.Date('31-12-14', "%d-%m-%y")
endDate <- Sys.Date()
# Rename variables for less space.
x2 <- rename(x2, Num_ppl = Numer.of.ppl.in.household.at.monthly.visit,
date.monthly.visit = Date.of.monthly.visit)
x1 <- rename(x1, Date.baseline = Date.of.baseline, Date.phone.distribution = Date.of.phone.distribution,
Date.withdrawl.move = Date.of.withdrawl.or.move)
# RESTRICT TO DESIRED TIME-FRAME
a1 <- x1[x1$Date.phone.distribution <= endDate, ]
rm(x1)
a2 <- x2[x2$date.monthly.visit <= endDate,]
rm(x2)
# SET END DATE
for (i in 1:nrow(a1)) {
a1$Date.withdrawl.move[i] <- CustomEndDate(a1$Date.withdrawl.move[i])
}
min(a1$Date.withdrawl.move)
max(a1$Date.withdrawl.move)
# a1$daysActive <- as.numeric(a1$Date.of.withdrawl.or.move - a1$Date.of.phone.distribution)
# MERGE - Keep all records at first to find missing data
a3 <- merge(a2, a1, by ="hh_listing_id", all=T, suffixes = c("", ".y"))
a3$HHID.y <- a3$Listing.number.y <- NULL
# Records for which we have no monthly visit data
missing.df <- a3[!complete.cases(a3), ]
# CLEAN where house moved but kept same HHID and listing number
a4 <- hhCleanup(a3[complete.cases(a3), ])
# PERSONE TIME for each household during each time-frame
a5 <- personTime(a4)
er <- a5[a5$delay <0,]
View(er)
# Author: Matthew Phelps
#Desc: Calculate number of people living in each household at baseline
# Intro -------------------------------------------------------------------
rm(list = ls())
graphics.off()
pc <- "C:/Users/wrz741/Dropbox/C5_R_Codes/Rdata"
setwd(pc)
rm(pc)
library(dplyr)
library(xlsx)
library(data.table)
#detach("package:plyr", unload=TRUE) # disrupts the dplyr package
CustomEndDate <- function(x) {
# Returns the specified end date if the withdrawl field is null
if (x < endDate & !is.na(x)){
return(x)
} else {
x <- endDate
return(x)
}
}
hhCleanup <- function(x) {
# separates HHs that moved within the same compound so had two baselines but same HHID and same listing No.
x2 <- data.frame(1,2,3,4,5,6,7,8,9)
setnames(x2, old = c(1,2,3,4,5,6,7,8,9), new = c(colnames(x)))
for(i in 1:nrow(x))
if (x$date.monthly.visit[i] >= x$Date.baseline[i] &
x$date.monthly.visit[i] <= x$Date.withdrawl.move[i] ) {
x2[i,] <- x[i,]
} else {
x2[i,] <- NA
}
x2$date.monthly.visit <- as.Date(x2$date.monthly.visit, origin = "1970-01-01")
x2$Date.baseline <- as.Date(x2$Date.baseline, origin = "1970-01-01")
x2$Date.phone.distribution <- as.Date(x2$Date.phone.distribution, origin = "1970-01-01")
x2$Date.withdrawl.move <- as.Date(x2$Date.withdrawl.move, origin = "1970-01-01")
return (x2)
}
personTime <- function(x) {
# Calculates person time for each specified date range. Returns data frame in same dimensions as input
complete.x <- x[complete.cases(x),]
factor = complete.x$HH_baseline
x1 <- split(complete.x, factor)
for (j in 1:length(x1)) {
x1[[j]]$pt <-0
x1[[j]]$delay <-0
for (i in 1:nrow(x1[[j]])) {
if(i == 1 & nrow(x1[[j]]) != 1 & x1[[j]]$date.monthly.visit[i] > x1[[j]]$Date.phone.distribution[i] ) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$date.monthly.visit[i] - x1[[j]]$Date.phone.distribution[i]) * x1[[j]]$Num_ppl[i]
} else if (i == 1 & nrow(x1[[j]]) != 1) {
x1[[j]]$pt <- 0
} else if (nrow(x1[[j]]) == 1 & x1[[j]]$Date.withdrawl.move[i] > x1[[j]]$Date.phone.distribution[i]) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$Date.withdrawl.move[i] - x1[[j]]$Date.phone.distribution[i]) * x1[[j]]$Num_ppl[i]
} else if(i > 1 & i < nrow(x1[[j]]) & x1[[j]]$date.monthly.visit[i] > x1[[j]]$date.monthly.visit[i-1]) {
x1[[j]]$pt[i] <- as.numeric(x1[[j]]$date.monthly.visit[i] - x1[[j]]$date.monthly.visit[i-1]) * x1[[j]]$Num_ppl[i]
} else if (x1[[j]]$Date.withdrawl.move[i] > x1[[j]]$date.monthly.visit[i]) {
x1[[j]]$pt[i] <- as.numeric((x1[[j]]$Date.withdrawl.move[i] - x1[[j]]$date.monthly.visit[i]) +
(x1[[j]]$date.monthly.visit[i] - x1[[j]]$date.monthly.visit[i-1])) * x1[[j]]$Num_ppl[i]
} else {
x1[[j]]$pt <- 'ERROR'
}
x1[[j]]$delay <- min(x1[[j]]$date.monthly.visit - x1[[j]]$Date.phone.distribution )
}
}
x1 <-  do.call(rbind.data.frame, x1)
row.names(x1) <- NULL
return(x1)
}
load("X-1 Choleraphone distribution 31Jul15.Rdata")
load("X-2 monthly visits 31Jul15.Rdata")
endDate <- as.Date('31-12-14', "%d-%m-%y")
endDate <- Sys.Date()
# Rename variables for less space.
x2 <- rename(x2, Num_ppl = Numer.of.ppl.in.household.at.monthly.visit,
date.monthly.visit = Date.of.monthly.visit)
x1 <- rename(x1, Date.baseline = Date.of.baseline, Date.phone.distribution = Date.of.phone.distribution,
Date.withdrawl.move = Date.of.withdrawl.or.move)
# RESTRICT TO DESIRED TIME-FRAME
a1 <- x1[x1$Date.phone.distribution <= endDate, ]
rm(x1)
a2 <- x2[x2$date.monthly.visit <= endDate,]
rm(x2)
# SET END DATE
for (i in 1:nrow(a1)) {
a1$Date.withdrawl.move[i] <- CustomEndDate(a1$Date.withdrawl.move[i])
}
min(a1$Date.withdrawl.move)
max(a1$Date.withdrawl.move)
# a1$daysActive <- as.numeric(a1$Date.of.withdrawl.or.move - a1$Date.of.phone.distribution)
# MERGE - Keep all records at first to find missing data
a3 <- merge(a2, a1, by ="hh_listing_id", all=T, suffixes = c("", ".y"))
a3$HHID.y <- a3$Listing.number.y <- NULL
# Records for which we have no monthly visit data
missing.df <- a3[!complete.cases(a3), ]
# CLEAN where house moved but kept same HHID and listing number
a4 <- hhCleanup(a3[complete.cases(a3), ])
# PERSONE TIME for each household during each time-frame
a5 <- personTime(a4)
er <- a5[a5$delay <0,]
rm(a3)
x= c(1,2,3)
# ERROR CHECKING ----------------------------------------------------------
min(a5$pt, na.rm=T)
which.max(a5$pt)
# Records for which the HHID and Listing number appear twice.
# Maybe same phone given to someone else in compound, or same family move
# within compound
error.df <- a5[a5$pt=='ERROR',]
View(error.df)
View(error.df)
